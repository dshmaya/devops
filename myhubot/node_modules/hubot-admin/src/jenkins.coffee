# Description:
#   Interact with your Jenkins CI server
#
# Dependencies:
#   None
#
# Configuration:
#   HUBOT_JENKINS_URL
#   HUBOT_JENKINS_AUTH
#
#   Auth should be in the "user:password" format.
#
# Commands:
#   hubot jenkins b <jobNumber> - builds the job specified by jobNumber. List jobs to get number.
#   hubot jenkins build <job> - builds the specified Jenkins job
#   hubot jenkins build <job>, <params> - builds the specified Jenkins job with parameters as key=value&key2=value2
#   hubot jenkins list <filter> - lists Jenkins jobs
#   hubot jenkins describe <job> - Describes the specified Jenkins job
#   hubot jenkins last <job> - Details about the last build for the specified Jenkins job
#   hubot jenkins changes list <job> - display commits in specified Jenkins jobs
#   hubot jenkins commiters list <job> - display commiters in specified Jenkins jobs

#
# Author:
#   dougcole

querystring = require 'querystring'

# Holds a list of jobs, so we can trigger them with a number
# instead of the job's name. Gets populated on when calling
# list.
jobList = []

jenkinsBuildById = (msg) ->
  # Switch the index with the job name
  job = jobList[parseInt(msg.match[1]) - 1]

  if job
    msg.match[1] = job
    jenkinsBuild(msg)
  else
    msg.reply "I couldn't find that job. Try `jenkins list` to get a list."

jenkinsBuild = (msg, buildWithEmptyParameters) ->
    url = process.env.HUBOT_JENKINS_URL
    job = querystring.escape msg.match[1]
    params = msg.match[3]
    command = if buildWithEmptyParameters then "buildWithParameters" else "build"
    path = if params then "#{url}/job/#{job}/buildWithParameters?#{params}" else "#{url}/job/#{job}/#{command}"

    req = msg.http(path)

#    if process.env.HUBOT_JENKINS_AUTH
#      auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64')
#      req.headers Authorization: "Basic #{auth}"

    req.header('Content-Length', 0)
    req.post() (err, res, body) ->
        if err
          msg.reply "Jenkins says: #{err}"
        else if 200 <= res.statusCode < 400 # Or, not an error code.
          msg.reply "(#{res.statusCode}) Build started for #{job} #{url}/job/#{job}"
        else if 400 == res.statusCode
          jenkinsBuild(msg, true)
        else if 404 == res.statusCode
          msg.reply "Build not found, double check that it exists and is spelt correctly."
        else if 403 == res.statusCode
          msg.reply "user is not authorized."
        else
          msg.reply "Jenkins says: Status #{res.statusCode} #{body}"

jenkinsDescribe = (msg) ->
    url = process.env.HUBOT_JENKINS_URL
    job = msg.match[1]

    path = "#{url}/job/#{job}/api/json"

    req = msg.http(path)

    if process.env.HUBOT_JENKINS_AUTH
      auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64')
      req.headers Authorization: "Basic #{auth}"

    req.header('Content-Length', 0)
    req.get() (err, res, body) ->
        if err
          msg.send "Jenkins says: #{err}"
        else
          response = ""
          try
            content = JSON.parse(body)
            response += "JOB: #{content.displayName}\n"
            response += "URL: #{content.url}\n"

            if content.description
              response += "DESCRIPTION: #{content.description}\n"

            response += "ENABLED: #{content.buildable}\n"
            response += "STATUS: #{content.color}\n"

            tmpReport = ""
            if content.healthReport.length > 0
              for report in content.healthReport
                tmpReport += "\n  #{report.description}"
            else
              tmpReport = " unknown"
            response += "HEALTH: #{tmpReport}\n"

            parameters = ""
            for item in content.actions
              if item.parameterDefinitions
                for param in item.parameterDefinitions
                  tmpDescription = if param.description then " - #{param.description} " else ""
                  tmpDefault = if param.defaultParameterValue then " (default=#{param.defaultParameterValue.value})" else ""
                  parameters += "\n  #{param.name}#{tmpDescription}#{tmpDefault}"

            if parameters != ""
              response += "PARAMETERS: #{parameters}\n"

            msg.send response

            if not content.lastBuild
              return

            path = "#{url}/job/#{job}/#{content.lastBuild.number}/api/json"
            req = msg.http(path)
            if process.env.HUBOT_JENKINS_AUTH
              auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64')
              req.headers Authorization: "Basic #{auth}"

            req.header('Content-Length', 0)
            req.get() (err, res, body) ->
                if err
                  msg.send "Jenkins says: #{err}"
                else
                  response = ""
                  try
                    content = JSON.parse(body)
                    console.log(JSON.stringify(content, null, 4))
                    jobstatus = content.result || 'PENDING'
                    jobdate = new Date(content.timestamp);
                    response += "LAST JOB: #{jobstatus}, #{jobdate}\n"

                    msg.send response
                  catch error
                    msg.send error

          catch error
            msg.send error

jenkinsLast = (msg) ->
    url = process.env.HUBOT_JENKINS_URL
    job = msg.match[1]

    path = "#{url}/job/#{job}/lastBuild/api/json"

    req = msg.http(path)

    if process.env.HUBOT_JENKINS_AUTH
      auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64')
      req.headers Authorization: "Basic #{auth}"

    req.header('Content-Length', 0)
    req.get() (err, res, body) ->
        if err
          msg.send "Jenkins says: #{err}"
        else
          response = ""
          try
            content = JSON.parse(body)
            response += "NAME: #{content.fullDisplayName}\n"
            response += "URL: #{content.url}\n"

            if content.description
              response += "DESCRIPTION: #{content.description}\n"

            response += "BUILDING: #{content.building}\n"

            msg.send response

getMsg = (channel,job) ->
  message:
    room: "#{channel}"
  content:
    fallback: job.name + " "+job.color
    author_name: 'Jenkins'
    author_icon: "https://a.slack-edge.com/205a/img/services/jenkins-ci_36.png"
    color: if job.color == "red"
      '#FF0000'
    else if job.color == "red_anime"
      '#FF0000'
    else if job.color == "blue"
      "#00FF00"
    else if job.color == "blue_anime"
      "#00FF00"
    else if job.color == "aborted"
      '#CCCCCC'
    else if job.color == "aborted_anime"
      '#CCCCCC'
    else if job.color == "yellow_anime"
      '#FFCC00'
    else if job.color == "yellow"
      '#FFCC00'
    else '#CCCCCC'
    title: job.name
    title_link: job.url
    fields: [
      title: if job.color == "red"
        "Fail"
      else if job.color == "blue"
        "Pass"
      else if job.color == "aborted"
        "Aborted"
      else if job.color == "yellow"
        "Unstable"
      else if job.color == "aborted_anime"
        "Currently running (last aborted)"
      else if job.color == "red_anime"
        "Currently running (last fail)"
      else if job.color == "blue_anime"
        "Currently running (last pass)"
      else if job.color == "yellow_anime"
        "Currently running (last unstable)"
      else "Unknown"
    ]


jenkinsList = (msg) ->
    url = process.env.HUBOT_JENKINS_URL
#    url = "http://mydtbld0101.hpeswlab.net:8888/jenkins/view/%20%20MQM-12.53.4/view/CI/"
    filter = new RegExp(msg.match[2], 'i')
    req = msg.http("#{url}/api/json")

#    if process.env.HUBOT_JENKINS_AUTH
#      auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64')
#      req.headers Authorization: "Basic #{auth}"

    req.get() (err, res, body) ->
        response = ""
        if err
          msg.send "Jenkins says: #{err}"
        else
          try
            content = JSON.parse(body)
            for job in content.jobs
              #msg.robot.logger.info "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  room :    #{msg.envelope.room}         !!!!!!!!!!!!!!!!!!!!!!!!!"

             # Add the job to the jobList
              index = jobList.indexOf(job.name)
              if index == -1
                jobList.push(job.name)
                index = jobList.indexOf(job.name)

              state = if job.color == "red"
                        "FAIL"
                      else if job.color == "blue"
                        "PASS"
                      else if job.color == "yellow"
                        "UNSTABLE"
                      else if job.color == "aborted"
                        "ABORTED"
                      else if job.color == "aborted_anime"
                        "CURRENTLY RUNNING"
                      else if job.color == "red_anime"
                        "CURRENTLY RUNNING"
                      else if job.color == "blue_anime"
                        "CURRENTLY RUNNING"
                      else if job.color == "yellow_anime"
                        "CURRENTLY RUNNING"
                      else "UNKNOWN"

              if (filter.test job.name) or (filter.test state)
#                msg.robot.logger.info "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  color :    #{job.color}         !!!!!!!!!!!!!!!!!!!!!!!!!"
                msg.robot.adapter.customMessage getMsg(msg.envelope.room,job)
                #response += "[#{index + 1}] #{state} #{job.name}\n"
            msg.send response
          catch error
            msg.send error

getChange = (channel,file,author,date) ->
  message:
    room: "#{channel}"
  content:
    fallback: author
    author_name: author
    fields: [
      title: date
      value: file
    ]

jenkinsChangesList = (msg) ->
  url = process.env.HUBOT_JENKINS_URL
  jobName = msg.match[2]
# buildNumber = msg.robot.brain.get(jobName+'buildNumber')
#  if (jobName)
#    buildNumber = msg.robot.brain.get(jobName+'buildNumber')
#  else

#  msg.robot.logger.info '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--->'+a+' ; '+b+' ; '+c+' ; '+d+' ; '+e+' ; '+'<----!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'

#  msg.robot.logger.info '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--->'+jobName+'<----!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'

  if(!jobName)
    jobName = "MQM-Root-quick-master"
  buildNumber = msg.robot.brain.get(jobName+'buildNumberPublished')
  path = "#{url}/job/#{jobName}/#{buildNumber}/api/json"
  msg.robot.logger.info '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--->'+path+'<----!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'

  response = ""
#  msg.robot.logger.info '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
#  msg.robot.logger.info msg.robot.brain.get(jobName+'buildNumber')
#  msg.robot.logger.info path
#  msg.robot.logger.info '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
  req = msg.http(path)
  req.get() (err, res, body) ->
    if err
      msg.send {room: channel} , "Jenkins says: #{err}"
    else
      try
        content = JSON.parse(body)
        msg.send 'build '+jobName+' '+content.displayName
        for item in content.changeSet.items
          response = ""
          for filea in item.paths
#            msg.robot.logger.info '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
#            msg.robot.logger.info item
#            msg.robot.logger.info filea
#            msg.robot.logger.info '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
            response += "#{filea.file}\n"
#            msg.robot.logger.info '!-------!!!!!!!!!!!!-----------!!!!!!!!!!!!!!----------!!!!!!!!!!!!!!!!!!!!!!!!'+response
          msg.robot.adapter.customMessage getChange(msg.envelope.room,response,item.author.fullName,item.date)
#          msg.send response
      catch error
        msg.send {room: channel} , "Jenkins says: #{error}"

jenkinsCommitersList2 = (msg) ->
  term   = "\"#{msg.match[2]?.trim()}\""
  origin = msg.match[0]
  target1 = msg.match[1]
  target2 = msg.match[2]
  target3 = msg.match[3]
  msg.robot.logger.info '!'+origin+','+target1+','+target2+','+target3+'<----!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'

jenkinsCommitersList = (msg) ->
  commitersList = []
  url = process.env.HUBOT_JENKINS_URL
  jobName = msg.match[2]
  # buildNumber = msg.robot.brain.get(jobName+'buildNumber')
  #  if (jobName)
  #    buildNumber = msg.robot.brain.get(jobName+'buildNumber')
  #  else


#  msg.robot.logger.info '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--->'+jobName+'<----!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'

  if(!jobName)
    jobName = "MQM-Root-quick-master"
  buildNumber = msg.robot.brain.get(jobName+'buildNumberPublished')
  path = "#{url}/job/#{jobName}/#{buildNumber}/api/json"
#  msg.robot.logger.info '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--->'+path+'<----!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'

  response = ""
  req = msg.http(path)
  req.get() (err, res, body) ->
    if err
      msg.send {room: msg.envelope.room} , "Jenkins says: #{err}"
    else
      try
        content = JSON.parse(body)
        msg.send 'build '+jobName+' '+content.displayName
        for item in content.changeSet.items
          index = commitersList.indexOf(item.author.fullName)
          if index == -1
            commitersList.push(item.author.fullName)
            index = commitersList.indexOf(item.author.fullName)
            response += "#{item.author.fullName}\n"
        msg.send response
#        msg.robot.adapter.customMessage jenkinsMsg(msg.envelope.room,'build '+jobName+' '+content.displayName,response)
      catch error
        msg.send {room: msg.envelope.room} , "Jenkins says: #{error}"


module.exports = (robot) ->

  slackMembers = null
  utils = new (require '../lib/utils')(robot.adapterName)
  utils.usersList(robot)
  .then (members) ->
    slackMembers = members

  robot.respond /j(?:enkins)? build ([\w\.\-_ ]+)(, (.+))?/i, (msg) ->
    jenkinsBuild(msg, false)

  robot.respond /j(?:enkins)? b (\d+)/i, (msg) ->
    jenkinsBuildById(msg)

  robot.respond /j(?:enkins)? list( (.+))?/i, (msg) ->
    jenkinsList(msg)

  robot.respond /j(?:enkins)? describe (.*)/i, (msg) ->
    jenkinsDescribe(msg)

  robot.respond /j(?:enkins)? last (.*)/i, (msg) ->
    jenkinsLast(msg)

  robot.respond /j(?:enkins)? changes list( (.+))?/i, (msg) ->
    jenkinsChangesList(msg)

  robot.respond /j(?:enkins)? commiters list( (.+))?/i, (msg) ->
    jenkinsCommitersList(msg)

  robot.respond /g(?:enkins)? commiters list (.+)\/i,(.+),(.+)/i, (msg) ->
    jenkinsCommitersList2(msg)

  robot.respond /j(?:enkins)? simulate pass build/i, (msg) ->
    job =    {


      "displayName" : "#12382",
      "duration" : 1662086,
      "estimatedDuration" : 1600050,
      "executor" : null,
      "fullDisplayName" : "MQM-Root-quick-master #12383",
      "id" : "12383",
      "keepLog" : false,
      "number" : 12382,
      "queueId" : 7569,
      "result" : "SUCCESS",
      "timestamp" : 1464595551561,
      "url" : "http://mydtbld0101.hpeswlab.net:8888/jenkins/view/%20%20MQM-master/view/01-CI/job/MQM-Root-quick-master/12383/",
      "builtOn" : "mydtbld0138.hpeswlab.net",
      "changeSet" : {
        "items" : [
          {
            "affectedPaths" : [
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/services/renders/configuration-render.js",
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-main/pipeline-management-main-controller.js",
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-failure-analysis/pipeline-management-failure-analysis-controller.js",
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-live/pipeline-management-live-controller.js"
            ],
            "commitId" : "3e22a8fa916168287f773c906e77b32ddea388c0",
            "timestamp" : 1464594272000,
            "author" : {
              "absoluteUrl" : "http://mydtbld0101.hpeswlab.net:8888/jenkins/user/masrawa",
              "fullName" : "daniel.shmaya"
            },
            "comment" : "fixed critical bug (systemTags undefined)\n",
            "date" : "2016-05-30 10:44:32 +0300",
            "id" : "3e22a8fa916168287f773c906e77b32ddea388c0",
            "msg" : "fixed critical bug (systemTags undefined)",
            "paths" : [
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/services/renders/configuration-render.js"
              },
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-failure-analysis/pipeline-management-failure-analysis-controller.js"
              },
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-main/pipeline-management-main-controller.js"
              },
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-live/pipeline-management-live-controller.js"
              }
            ]
          },
          {
            "affectedPaths" : [
              "UI/ui-automation/ui-automation-tests/src/test/java/com/hp/ui/automation/tests/agmTestCases/ReleaseTestCases.java"
            ],
            "commitId" : "55edd4517df1a298bbe7eadda37cf3c418153832",
            "timestamp" : 1464595129000,
            "author" : {
              "absoluteUrl" : "http://mydtbld0101.hpeswlab.net:8888/jenkins/user/ido.raz",
              "fullName" : "ido.raz"
            },
            "comment" : "Removed ignored test- moves it out of the category (TEMP)\n",
            "date" : "2016-05-30 10:58:49 +0300",
            "id" : "55edd4517df1a298bbe7eadda37cf3c418153832",
            "msg" : "Removed ignored test- moves it out of the category (TEMP)",
            "paths" : [
              {
                "editType" : "edit",
                "file" : "UI/ui-automation/ui-automation-tests/src/test/java/com/hp/ui/automation/tests/agmTestCases/ReleaseTestCases.java"
              }
            ]
          }
        ],
        "kind" : "git"
      }

    }
    handleChannelForBuild job

  robot.respond /j(?:enkins)? simulate one fail build (.*)/i, (msg) ->
    job2 =    {

      "building" : false,
      "description" : null,
      "displayName" : "#12384",
      "duration" : 1662086,
      "estimatedDuration" : 1600050,
      "executor" : null,
      "fullDisplayName" : "MQM-Root-quick-master #12384",
      "id" : msg.match[1],
      "keepLog" : false,
      "number" : msg.match[1],
      "queueId" : 7569,
      "result" : "UNSTABLE",
      "timestamp" : 1464595551561,
      "builtOn" : "mydtbld0138.hpeswlab.net",
      "changeSet" : {
        "items" : [
          {
            "affectedPaths" : [
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/services/renders/configuration-render.js",
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-main/pipeline-management-main-controller.js",
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-failure-analysis/pipeline-management-failure-analysis-controller.js",
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-live/pipeline-management-live-controller.js"
            ],
            "commitId" : "3e22a8fa916168287f773c906e77b32ddea388c0",
            "timestamp" : 1464594272000,
            "author" : {
              "absoluteUrl" : "http://mydtbld0101.hpeswlab.net:8888/jenkins/user/masrawa",
              "fullName" : "itay.ben-yehuda"
            },
            "comment" : "fixed critical bug (systemTags undefined)\n",
            "date" : "2016-05-30 10:44:32 +0300",
            "id" : "3e22a8fa916168287f773c906e77b32ddea388c0",
            "msg" : "fixed critical bug (systemTags undefined)",
            "paths" : [
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/services/renders/configuration-render.js"
              },
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-failure-analysis/pipeline-management-failure-analysis-controller.js"
              },
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-main/pipeline-management-main-controller.js"
              },
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-live/pipeline-management-live-controller.js"
              }
            ]
          },
          {
            "affectedPaths" : [
              "UI/ui-automation/ui-automation-tests/src/test/java/com/hp/ui/automation/tests/agmTestCases/ReleaseTestCases.java"
            ],
            "commitId" : "55edd4517df1a298bbe7eadda37cf3c418153832",
            "timestamp" : 1464595129000,
            "author" : {
              "absoluteUrl" : "http://mydtbld0101.hpeswlab.net:8888/jenkins/user/ido.raz",
              "fullName" : "ido.raz"
            },
            "comment" : "Removed ignored test- moves it out of the category (TEMP)\n",
            "date" : "2016-05-30 10:58:49 +0300",
            "id" : "55edd4517df1a298bbe7eadda37cf3c418153832",
            "msg" : "Removed ignored test- moves it out of the category (TEMP)",
            "paths" : [
              {
                "editType" : "edit",
                "file" : "UI/ui-automation/ui-automation-tests/src/test/java/com/hp/ui/automation/tests/agmTestCases/ReleaseTestCases.java"
              }
            ]
          }
        ],
        "kind" : "git"
      }

    }
    handleChannelForBuild job2

  robot.respond /j(?:enkins)? simulate second fail build (.*)/i, (msg) ->
    job3 =    {

      "building" : false,
      "description" : null,
      "displayName" : "#12385",
      "duration" : 1662086,
      "estimatedDuration" : 1600050,
      "executor" : null,
      "fullDisplayName" : "MQM-Root-quick-master #12385",
      "id" : msg.match[1],
      "keepLog" : false,
      "number" : msg.match[1],
      "queueId" : 7569,
      "result" : "UNSTABLE",
      "timestamp" : 1464595551561,
      "builtOn" : "mydtbld0138.hpeswlab.net",
      "changeSet" : {
        "items" : [
          {
            "affectedPaths" : [
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/services/renders/configuration-render.js",
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-main/pipeline-management-main-controller.js",
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-failure-analysis/pipeline-management-failure-analysis-controller.js",
              "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-live/pipeline-management-live-controller.js"
            ],
            "commitId" : "3e22a8fa916168287f773c906e77b32ddea388c0",
            "timestamp" : 1464594272000,
            "author" : {
              "absoluteUrl" : "http://mydtbld0101.hpeswlab.net:8888/jenkins/user/masrawa",
              "fullName" : "ido.raz"
            },
            "comment" : "fixed critical bug (systemTags undefined)\n",
            "date" : "2016-05-30 10:44:32 +0300",
            "id" : "3e22a8fa916168287f773c906e77b32ddea388c0",
            "msg" : "fixed critical bug (systemTags undefined)",
            "paths" : [
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/services/renders/configuration-render.js"
              },
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-failure-analysis/pipeline-management-failure-analysis-controller.js"
              },
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-main/pipeline-management-main-controller.js"
              },
              {
                "editType" : "edit",
                "file" : "UI/mqm-web-ui/app/ui/quality-center/pipeline-management/views/pipeline-management-live/pipeline-management-live-controller.js"
              }
            ]
          },
          {
            "affectedPaths" : [
              "UI/ui-automation/ui-automation-tests/src/test/java/com/hp/ui/automation/tests/agmTestCases/ReleaseTestCases.java"
            ],
            "commitId" : "55edd4517df1a298bbe7eadda37cf3c418153832",
            "timestamp" : 1464595129000,
            "author" : {
              "absoluteUrl" : "http://mydtbld0101.hpeswlab.net:8888/jenkins/user/ido.raz",
              "fullName" : "dimitry.patt"
            },
            "comment" : "Removed ignored test- moves it out of the category (TEMP)\n",
            "date" : "2016-05-30 10:58:49 +0300",
            "id" : "55edd4517df1a298bbe7eadda37cf3c418153832",
            "msg" : "Removed ignored test- moves it out of the category (TEMP)",
            "paths" : [
              {
                "editType" : "edit",
                "file" : "UI/ui-automation/ui-automation-tests/src/test/java/com/hp/ui/automation/tests/agmTestCases/ReleaseTestCases.java"
              }
            ]
          }
        ],
        "kind" : "git"
      }

    }
    handleChannelForBuild job3

  robot.jenkins = {
    list: jenkinsList,
    build: jenkinsBuild,
    describe: jenkinsDescribe,
    last: jenkinsLast,
    changesList:jenkinsChangesList,
    commitersList:jenkinsCommitersList
  }


  addCommittersToChannel = (channel, items) ->

    for item in items
      found = false
      slackMail = item.author.fullName + '@hpe.com'
      for member in slackMembers
        if member.profile.email == slackMail
          robot.logger.info 'inviting' + slackMail
          utils.invite_user(robot,channel.id,member.id)
          found = true
      if !found
        robot.logger.info 'cannot find user ' + slackMail
        robot.send  {room: channel.name} ,'cannot find user ' + slackMail

  handleChannelForBuild = (job) ->
    jobName = job.fullDisplayName.split(' ')[0] #MQM-Root-quick-master
    jobResult = job.result

    if jobResult == "SUCCESS"
      robot.brain.set jobName+'first_non_green_build', -1
      if robot.brain.get(jobName+'channel_name')
        robot.adapter.customMessage getMsg2(robot.brain.get(jobName+'channel_name'),job) #send passed msg to the previous failed channel
        #utils.archive_channel_id(robot,robot.brain.get(jobName+'channel_id'))
        robot.brain.set jobName+'channel_name', undefined

    if jobResult == "FAILURE" || jobResult == "UNSTABLE"
      if robot.brain.get(jobName+'first_non_green_build') < 0 || !robot.brain.get(jobName+'first_non_green_build')#fail after green
        robot.brain.set jobName+'first_non_green_build', job.id

      name = jobName.split("-")[2]
      utils.add_channel(robot,'#' + name + "#" + robot.brain.get(jobName+'first_non_green_build'))
        .then (channel) ->
          robot_id = ""
          ci_id = ""
          robot.logger.info process.env.CI_OWNER_MAIL
          for own key, user of robot.brain.data.users
            robot.logger.info user.name
            robot.logger.info user.email
            if user.name == robot.name
              robot_id = user.id
            if user.email_address == process.env.CI_OWNER_MAIL
              ci_id = user.id
          utils.invite_user(robot,channel.id, robot_id)
          utils.invite_user(robot,channel.id, ci_id)
          setTimeout ( ->
            robot.logger.info channel.id
            robot.logger.info channel.name
            robot.logger.info "job name is:" + jobName
            robot.brain.set jobName+'channel_name', channel.name
            robot.adapter.customMessage getMsg2(channel.name,job)

            addCommittersToChannel(channel,job.changeSet.items)
          ), 1000





  getMsg2 = (channel,job) ->
    message:
      room: "#{channel}"
    content:
      fallback: job.fullDisplayName
      color: if job.result == "FAILURE"
        '#FF0000'
      else if job.result == "ABORTED"
        '#CCCCCC'
      else if job.result == "UNSTABLE"
        '#FFCC00'
      else if job.result == "SUCCESS"
        '#00FF00'
      else '#FFCC00'
      author_icon: "https://a.slack-edge.com/205a/img/services/jenkins-ci_72.png"
      author_name: "Jenkins"
      title: job.fullDisplayName
      title_link: job.url
      fields: [
        title: job.result.toLowerCase()
        value: 'after '+ Math.round(job.duration/60000)+' minutes'
      ]


  callback = (channel,jobName) ->
    url = process.env.HUBOT_JENKINS_URL
    path = "#{url}/job/#{jobName}/lastBuild/api/json"
    req = robot.http(path)
    req.get() (err, res, body) ->
      if err
        robot.send {room: channel} , "Jenkins says: #{err}"
      else
        try
          content = JSON.parse(body)
#          published = robot.brain.get(jobName+'buildNumberPublished')
#          lastFinished = robot.brain.get(jobName+'buildNumberLastFinished')
#          robot.send {room: channel} , "published : #{published} , lastFinished : #{lastFinished}"
          if robot.brain.get(jobName+'buildNumberPublished') != content.number
            if(content.result == null)
              robot.brain.set jobName+'buildNumberLastFinished' , content.number-1
            else
              robot.brain.set jobName+'buildNumberLastFinished' , content.number

            if(robot.brain.get(jobName+'buildNumberPublished') != robot.brain.get(jobName+'buildNumberLastFinished'))
              robot.brain.set jobName+'buildNumberPublished' , robot.brain.get(jobName+'buildNumberLastFinished')
              buildNumber = robot.brain.get(jobName+'buildNumberPublished')
              path = "#{url}/job/#{jobName}/#{buildNumber}/api/json"
              req2 = robot.http(path)
              req2.get() (err, res, body) ->
                if err
                  robot.send {room: channel} , "Jenkins says: #{err}"
                else
                  try
                    content = JSON.parse(body)
                    robot.adapter.customMessage getMsg2(channel,content)
                    handleChannelForBuild content
                  catch error
                    robot.send {room: channel} , "Jenkins says: #{error}"
        catch error
          robot.send {room: channel} , "Jenkins says: #{error}"


  callbackQuick = () ->
    callback('general','MQM-Root-quick-master')

  callbackFull = () ->
    callback('general','MQM-Root-full-master')

  setInterval callbackQuick, 10000
  setInterval callbackFull, 30000


